<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WSharp.Core
{
	#region bytes
	/// <summary>
    /// 
    /// </summary>
	public static partial class EConvertType
	{
		<#
		string[] types = 
		{ 
			"Short", "Int", "Long", 
			"UShort", "UInt", "ULong", 
			"Float", "Double",
			"Char",
			"Bool"
		};

		string[] mapping_system_types = 
		{
			"Int16", "Int32", "Int64",
			"UInt16", "UInt32", "UInt64",
			"Single", "Double",
			"Char",
			"Boolean"
		};

		int index = -1;

		 #>
		<# foreach(string to in types) {
			++index;
			string lower = to.ToLower();
		 #>

		/// <summary>  转换为字节数组
        /// </summary>
        /// <param name="value"></param>
        /// <returns>字节数组</returns>
		public static byte[] GetBytes(this <#=lower#> value)
		{
			return BitConverter.GetBytes(value);
		}

		/// <summary> 由字节数组中指定的位置转换
        /// </summary>
        /// <param name="bytes">字节数组</param>
        /// <param name="startIndex">开始的位置</param>
        /// <returns></returns>
		public static <#=lower#> To<#=to#>(this byte[] bytes, int startIndex = 0)
		{
			return BitConverter.To<#=mapping_system_types[index] #>(bytes, startIndex);
		}

		<# } #>

		/// <summary> 转换为字节数组
        /// </summary>
        /// <param name="value"></param>
		/// <param name="encoding">编码方式（如果为null，使用System.Text.Encoding.Unicode）</param>
        /// <returns>字节数组</returns>
		public static byte[] GetBytes(this string value, System.Text.Encoding encoding = null)
		{
			if (encoding == null)
				encoding = System.Text.Encoding.Unicode;
			return encoding.GetBytes(value);
		}

		/// <summary> 由字节数组中指定的位置转换
        /// </summary>
        /// <param name="bytes">字节数组</param>
        /// <param name="encoding">编码方式（如果为null，使用System.Text.Encoding.Unicode）</param>
        /// <returns></returns>
		public static string ToString(this byte[] bytes, System.Text.Encoding encoding = null)
		{
			if (encoding == null)
				encoding = System.Text.Encoding.Unicode;
			return encoding.GetString(bytes);
		}

		/// <summary> 将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式
        /// </summary>
        /// <param name="bytes">一个 8 位无符号整数数组</param>
        /// <param name="option">如果每 76 个字符插入一个分行符，则使用 InsertLineBreaks，如果不插入分行符，则使用 None</param>
        /// <returns></returns>
		public static string ToBase64String(this byte[] bytes, Base64FormattingOptions option = Base64FormattingOptions.None)
		{
			if (bytes == null)
				return String.Empty;
			return Convert.ToBase64String(bytes, option);
		}

		/// <summary> 将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式
        /// </summary>
        /// <param name="bytes">一个 8 位无符号整数数组</param>
		/// <param name="offset">bytes 数组中的偏移量</param>
		/// <param name="length">要转换的 bytes 的元素数</param>
        /// <param name="option">如果每 76 个字符插入一个分行符，则使用 InsertLineBreaks，如果不插入分行符，则使用 None</param>
        /// <returns></returns>
		public static string ToBase64String(this byte[] bytes, int offset, int length, Base64FormattingOptions option = Base64FormattingOptions.None)
		{
			if (bytes == null)
				return String.Empty;
			return Convert.ToBase64String(bytes, offset, length, option);
		}

	}
	#endregion

	#region TryTo
	/// <summary>
    /// 类型转换工具类
    /// </summary>
	public static partial class EConvertType
    {
	<#
		string that_object = "";
		string that_string = "this ";
		string[] try_tos = 
		{ 
			"Short", "Int", "Long", 
			"UShort", "UInt", "ULong", 
			"Float", "Double", "Decimal", 
			"Char",
			"Bool",
			"DateTime"
		};

		foreach(string to in try_tos)
		{
			string lower = to.ToLower();
			if(to == "DateTime")
			{
				lower = "System." + to;
			}
		#>

		/// <summary>
		/// </summary>
		/// <param name="obj"></param>
		/// <returns>转换失败返回null</returns>
		public static <#=lower #>? TryTo<#=to #>(<#=that_object #>object obj)
		{
			if (obj == null)
				return null;
			else if (obj is <#=lower #>)
				return (<#=lower #>)obj;
			<#=lower #> result;
			if(<#=lower #>.TryParse(obj.ToString(), out result))
				return result;
			return null;
		}

		/// <summary>
		/// </summary>
		/// <param name="str"></param>
		/// <returns>转换失败返回null</returns>
		public static <#=lower #>? TryTo<#=to #>(<#=that_string #>string str)
		{
			<#=lower #> result;
			if(<#=lower #>.TryParse(str, out result))
				return result;
			return null;
		}
		<#}#>

		/// <summary>
		/// retrun t == null ?  String.Empty : t.ToString();
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="t"></param>
		/// <returns></returns>
		public static string TryToString<T>(this T t) 
		{
			return t == null ? null : t.ToString();
		}
		
	}
	#endregion

}